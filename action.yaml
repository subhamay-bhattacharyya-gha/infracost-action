name: "Infracost Run"
description: "Downloads a Terraform plan artifact and runs Infracost to generate a cost breakdown."

inputs:
  terraform-dir:
    description: "Relative path to the directory containing Terraform configuration files (e.g., 'tf', 'infrastructure')."
    required: false
    type: string
    default: "tf"

  release-tag:
    description: "Git release tag to check out. If omitted, the latest commit on the default branch is used."
    required: false
    type: string
    default: ""

  ci-pipeline:
    description: "Set to 'true' to include the commit SHA in the Terraform state key (suitable for CI/CD). Use 'false' for static state keys."
    required: false
    type: string
    default: "false"

  s3-bucket:
    description: "Name of the S3 bucket used as the backend for storing the Terraform state file."
    required: true
    type: string

  s3-region:
    description: "AWS region where the S3 backend bucket is located (e.g., us-east-1, eu-west-1)."
    required: true
    type: string

  tf-plan-name:
    description: "Name of the Terraform plan artifact."
    required: false
    default: "terraform-plan"

  tf-plan-file:
    description: "Base filename (without extension) for the Terraform plan output."
    required: false
    default: "tfplan"

  tf-vars-file:
    description: "Optional Terraform variable file."
    required: false
    default: "terraform.tfvars"

  infracost-api-key:
    description: "Infracost API key."
    required: true

  gist-id:
    description: "Gist ID containing the Infracost configuration (e.g., max cost)."
    required: true

  gist-filename:
    description: "Filename of the Gist containing the Infracost configuration (e.g., 'infracost-config.json')."
    required: true
    default: "infracost-config.json"

  environment:
    description: "GitHub environment name (e.g., 'prod', 'test', 'devl'). Used to match max cost in Gist."
    required: false
    default: "devl"

outputs:
  monthly-cost:
    description: "Total monthly cost from Infracost"
    value: ${{ steps.infracost-json.outputs.monthly-cost }}
  max-cost:
    description: "Maximum cost threshold from Gist or fallback"
    value: ${{ steps.download-gist.outputs.max_cost }}

runs:
  using: "composite"
  steps:
    - name: Set Checkout Ref
      id: set-ref
      shell: bash
      run: |
        if [[ -n "${{ inputs.release-tag }}" ]]; then
          echo "ref=${{ inputs.release-tag }}" >> $GITHUB_OUTPUT
        else
          echo "ref=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
        fi

    - name: Checkout Repo
      id: checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.set-ref.outputs.ref }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Generate Terraform State Key
      id: generate-tfstate-key
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        if [[ "${{ inputs.ci-pipeline }}" == "true" ]]; then
          state_key="${{ github.repository }}/${{ github.sha }}/terraform.tfstate"
        else
          state_key="${{ github.repository }}/terraform.tfstate"
        fi
        echo "s3_key=$state_key" >> $GITHUB_OUTPUT

    - name: Initialize Terraform with S3 Backend
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        terraform init -input=false \
          -backend-config="bucket=${{ inputs.s3-bucket }}" \
          -backend-config="key=${{ steps.generate-tfstate-key.outputs.s3_key }}" \
          -backend-config="region=${{ inputs.s3-region }}" \
          -backend-config="encrypt=true" \
          -backend-config="use_lockfile=true"

    - name: Download Plan Output as Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.tf-plan-name }}
        path: ${{ github.workspace }}/${{ inputs.terraform-dir }}

    - name: Convert Terraform plan to JSON
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        terraform show -json ${{ inputs.tf-plan-file }}.out > ${{ inputs.tf-plan-file }}.json

    - name: Upload Terraform Plan JSON as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.tf-plan-name }}-json
        path: ${{ github.workspace }}/${{ inputs.terraform-dir }}/${{ inputs.tf-plan-file }}.json

    - name: Setup Infracost
      uses: infracost/actions/setup@v3

    - name: Download Gist JSON file to get the Infracost configuration (max cost, etc.)
      id: download-gist
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        GIST_ID="${{ inputs.gist-id }}"
        FILENAME="${{ inputs.gist-filename }}"
        USERNAME="${{ github.actor }}"
        ENVIRONMENT="$(echo "${{ inputs.environment }}" | tr '[:upper:]' '[:lower:]')"
        REPO_NAME="$(echo "${{ github.repository }}" | cut -d'/' -f2)"

        GIST_URL="https://gist.githubusercontent.com/$USERNAME/$GIST_ID/raw/$FILENAME"
        echo "Fetching Gist from: $GIST_URL"
        curl -sSL "$GIST_URL" -o gist.json
        echo "Downloaded Gist JSON:"
        cat gist.json

        echo "Environment: $ENVIRONMENT"
        echo "Repository: $REPO_NAME"

        MAX_COST=$(jq -r --arg repo "$REPO_NAME" --arg env "$ENVIRONMENT" '.[$repo][$env].max_cost' gist.json)

        if [[ -z "$MAX_COST" || "$MAX_COST" == "null" ]]; then
          echo "⚠️ max_cost not found for $REPO_NAME in $ENVIRONMENT. Using fallback value 9.99"
          MAX_COST="9.99"
        fi

        echo "✅ max_cost resolved: $MAX_COST"
        echo "max_cost=$MAX_COST" >> "$GITHUB_OUTPUT"

        echo "### 💰 Infracost Defined Max Cost" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "max_cost=$MAX_COST ($ENVIRONMENT)" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Install bc
      id: install-bc
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update && sudo apt-get install -y bc

    - name: Run Infracost (JSON)
      id: infracost-json
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      env:
        INFRACOST_API_KEY: ${{ inputs.infracost-api-key }}
      run: |
        command -v bc >/dev/null 2>&1 || { echo >&2 "❌ 'bc' is required but not installed."; exit 1; }

        MAX_COST="${{ steps.download-gist.outputs.max_cost }}"
        echo "Using max_cost: $MAX_COST"

        infracost breakdown \
          --path=${{ inputs.tf-plan-file }}.json \
          --format=json \
          --log-level=info \
          --out-file=cost-report.json

        monthly_cost=$(jq -r '.summary.totalMonthlyCost // "0"' cost-report.json)
        printf "monthly-cost=%.2f\n" "$monthly_cost" >> $GITHUB_OUTPUT

        echo "Monthly cost from Infracost: $monthly_cost"

        if [[ -n "$MAX_COST" ]]; then
          max=$(echo "$MAX_COST" | awk '{ printf "%.2f", $1 }')
          if (( $(echo "$monthly_cost > $max" | bc -l) )); then
            echo "❌ Monthly cost ($monthly_cost) exceeds max threshold ($max)"
            exit 1
          fi
        fi

    - name: Append Infracost Table Summary
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      env:
        INFRACOST_API_KEY: ${{ inputs.infracost-api-key }}
      run: |
        infracost breakdown \
          --path=${{ inputs.tf-plan-file }}.json \
          --format=table \
          --log-level=info > cost-table.txt

        echo "### 💰 Infracost Monthly Cost Breakdown (Table)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat cost-table.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
