name: "Infracost Run"
description: "Downloads a Terraform plan artifact and runs Infracost to generate a cost breakdown."

inputs:
  terraform-dir:
    description: "Relative path to the directory containing Terraform configuration files (e.g., 'tf', 'infrastructure')."
    required: false
    type: string
    default: "tf"

  release-tag:
    description: "Git release tag to check out. If omitted, the latest commit on the default branch is used."
    required: false
    type: string
    default: ""

  ci-pipeline:
    description: "Set to 'true' to include the commit SHA in the Terraform state key (suitable for CI/CD). Use 'false' for static state keys."
    required: false
    type: string
    default: "false"

  s3-bucket:
    description: "Name of the S3 bucket used as the backend for storing the Terraform state file."
    required: true
    type: string

  s3-region:
    description: "AWS region where the S3 backend bucket is located (e.g., us-east-1, eu-west-1)."
    required: true
    type: string

  tf-plan-name:
    description: "Name of the Terraform plan artifact."
    required: false
    default: "terraform-plan"

  tf-plan-file:
    description: "Base filename (without extension) for the Terraform plan output."
    required: false
    default: "tfplan"

  tf-vars-file:
    description: "Optional Terraform variable file."
    required: false
    default: "terraform.tfvars"

  infracost-api-key:
    description: "Infracost API key."
    required: true

  gist-id:
    description: "Gist ID containing the Infracost configuration (e.g., max cost)."
    required: true

  gist-filename:
    description: "Filename of the Gist containing the Infracost configuration (e.g., 'infracost-config.json')."
    required: true
    default: "infracost-config.json"

  max-cost:
    description: "Optional cost threshold. Fails if total monthly cost exceeds this amount (e.g., 100.00)."
    required: false
    default: "10.00"

outputs:
  monthly-cost:
    description: "Total monthly cost from Infracost"
    value: ${{ steps.infracost-json.outputs.monthly-cost }}

runs:
  using: "composite"
  steps:
    - name: Set Checkout Ref
      id: set-ref
      shell: bash
      run: |
        if [[ -n "${{ inputs.release-tag }}" ]]; then
          echo "ref=${{ inputs.release-tag }}" >> $GITHUB_OUTPUT
        else
          echo "ref=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
        fi

    - name: Checkout Repo
      id: checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.set-ref.outputs.ref }}

    - name: Setup Terraform
      id: setup-terraform
      uses: hashicorp/setup-terraform@v3

    - name: Generate Terraform State Key
      id: generate-tfstate-key
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        if [[ "${{ inputs.ci-pipeline }}" == "true" ]]; then
          state_key="${{ github.repository }}/${{ github.sha }}/terraform.tfstate"
        else
          state_key="${{ github.repository }}/terraform.tfstate"
        fi
        echo "s3_key=$state_key" >> $GITHUB_OUTPUT

    - name: Initialize Terraform with S3 Backend
      id: terraform-init-s3
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        terraform init -input=false \
          -backend-config="bucket=${{ inputs.s3-bucket }}" \
          -backend-config="key=${{ steps.generate-tfstate-key.outputs.s3_key }}" \
          -backend-config="region=${{ inputs.s3-region }}" \
          -backend-config="encrypt=true" \
          -backend-config="use_lockfile=true"

    - name: Download Plan Output as Artifact
      id: download-plan-artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.tf-plan-name }}
        path: ${{ github.workspace }}/${{ inputs.terraform-dir }}

    - name: Convert Terraform plan to JSON
      id: convert-tfplan-json
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        terraform show -json ${{ inputs.tf-plan-file }}.out > ${{ inputs.tf-plan-file }}.json
        echo "----------- Terraform plan converted to JSON -----------"
        cat ${{ inputs.tf-plan-file }}.json | jq
        echo "---------------------------------------------------------"

    - name: Setup Infracost
      uses: infracost/actions/setup@v2

    - name: Download Gist JSON file to get the Infracost configuration (max cost, etc.)
      id: download-gist
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        GIST_ID="${{ inputs.gist-id }}"
        FILENAME="${{ inputs.gist-filename }}"
        USERNAME="${{ github.actor }}" 
        ENVIRONMENT="${{ github.environment }}"

        GIST_URL="https://gist.githubusercontent.com/$USERNAME/$GIST_ID/raw/$FILENAME"
        echo "Fetching Gist from: $GIST_URL"
        
        curl -sSL "$GIST_URL" -o gist.json
        cat gist.json
        echo "-------------------------"
        echo "Environment: $ENVIRONMENT"

    - name: Run Infracost (JSON)
      id: infracost-json
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      env:
        INFRACOST_API_KEY: ${{ inputs.infracost-api-key }}
      run: |
        infracost breakdown \
          --path=${{ inputs.tf-plan-file }}.json \
          --format=json \
          --log-level=info \
          --out-file=cost-report.json

        monthly_cost=$(jq -r '.summary.totalMonthlyCost // "0"' cost-report.json)
        printf "monthly-cost=%.2f\n" "$monthly_cost" >> $GITHUB_OUTPUT

        if [[ -n "${{ inputs.max-cost }}" ]]; then
          max=$(echo "${{ inputs.max-cost }}" | awk '{ printf "%.2f", $1 }')
          if (( $(echo "$monthly_cost > $max" | bc -l) )); then
            echo "❌ Monthly cost ($monthly_cost) exceeds max threshold ($max)"
            exit 1
          fi
        fi

    - name: Append Infracost Table Summary
      id: infracost-table
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      env:
        INFRACOST_API_KEY: ${{ inputs.infracost-api-key }}
      run: |
        infracost breakdown \
          --path=${{ inputs.tf-plan-file }}.json \
          --format=table \
          --log-level=info > cost-table.txt

        echo "### 💰 Infracost Monthly Cost Breakdown (Table)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat cost-table.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
