name: 'Infracost Run'
description: 'Download Terraform plan artifact and run Infracost to generate cost breakdown.'

inputs:
  release-tag:
    description: 'Optional release tag to checkout'
    required: false
    type: string
    default: ''

  terraform-dir:
    description: "Path to the Terraform configuration"
    required: false
    default: "tf"

  s3-bucket:
    description: "S3 bucket for Terraform backend"
    required: true

  s3-region:
    description: "AWS region where the S3 bucket is located"
    required: true

  tf-plan-file:
    description: "File to save the Terraform plan output"
    required: false
    default: "tfplan"  

  tf-vars-file:
    description: "Optional Terraform variable file"
    required: false
    default: "terraform.tfvars"

  tf-plan-name:
    description: "Name of the Terraform plan file"
    required: false
    default: "terraform-plan"

  ci-pipeline:
    description: "Set to true to use commit SHA in backend key"
    required: false
    default: "false"

  infracost-api-key:
    description: 'Infracost API key'
    required: true

  max-cost:
    description: "Optional cost threshold. Fail if total monthly cost exceeds this amount (e.g., 100.00)"
    required: false
    default: "10.00"

outputs:
  monthly-cost:
    description: "Total monthly cost from Infracost"
    value: ${{ steps.infracost-json.outputs.monthly-cost }}

runs:
  using: 'composite'
  steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Download Terraform plan artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.terraform-plan-file }}
        path: ${{ inputs.tf-plan-name}}

    - name: Setup Infracost
      uses: infracost/actions/setup@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Compute Backend Key from Repository Name
      id: key
      shell: bash
      run: |
        if [[ "${{ inputs.ci-pipeline }}" == "true" ]]; then
          state_key="${{ github.repository }}/${{ github.sha }}/terraform.tfstate"
        else
          state_key="${{ github.repository }}/terraform.tfstate"
        fi
        echo "s3_key=$state_key" >> $GITHUB_OUTPUT

    - name: Terraform Init with S3 Backend
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        terraform init -input=false \
          -backend-config="bucket=${{ inputs.s3-bucket }}" \
          -backend-config="key=${{ steps.key.outputs.s3_key }}" \
          -backend-config="region=${{ inputs.s3-region }}" \
          -backend-config="encrypt=true" \
          -backend-config="use_lockfile=true"

    - name: Convert Terraform plan to JSON
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        terraform show -json ${{ inputs.tf-plan-file }}.out > ${{ inputs.tf-plan-file }}.json
        echo "----------- Terraform plan converted to JSON -----------"
        cat ${{ inputs.tf-plan-file }}.json | jq
        echo "---------------------------------------------------------"

    - name: Run Infracost (JSON)
      id: infracost-json
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      env:
        INFRACOST_API_KEY: ${{ inputs.infracost-api-key }}
      run: |
        infracost breakdown \
          --path=${{ inputs.tf-plan-file }}.json \
          --format=json \
          --log-level=info \
          --out-file=cost-report.json

        monthly_cost=$(jq -r '.summary.totalMonthlyCost // "0"' cost-report.json)
        printf "monthly-cost=%.2f\n" "$monthly_cost" >> $GITHUB_OUTPUT

        if [[ -n "${{ inputs.max-cost }}" ]]; then
          max=$(echo "${{ inputs.max-cost }}" | awk '{ printf "%.2f", $1 }')
          if (( $(echo "$monthly_cost > $max" | bc -l) )); then
            echo "❌ Monthly cost ($monthly_cost) exceeds max threshold ($max)"
            exit 1
          fi
        fi

    - name: Append Infracost Table Summary
      id: infracost-table
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      env:
        INFRACOST_API_KEY: ${{ inputs.infracost-api-key }}
      run: |
        infracost breakdown \
          --path=${{ inputs.tf-plan-file }}.json \
          --format=table \
          --log-level=info > cost-table.txt

        echo "### 💰 Infracost Monthly Cost Breakdown (Table)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat cost-table.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
